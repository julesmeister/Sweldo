/**
 * Script to extract the generated Tailwind CSS and create an inlined version
 * This ensures styles work in all environments without external CSS file dependencies
 */
const fs = require("fs");
const path = require("path");

// Paths
const inputCssPath = path.resolve(
  __dirname,
  "../public/styles/tailwind-web.css"
);
const outputJsPath = path.resolve(__dirname, "../utils/inlinedStyles.js");
const backupJsPath = path.resolve(
  __dirname,
  "../utils/inlinedStyles.backup.js"
);

// First, check if the CSS file exists
if (!fs.existsSync(inputCssPath)) {
  console.error(`Error: Tailwind CSS file not found at ${inputCssPath}`);
  console.log(
    'Please run "npm run generate:tailwind" first to generate the CSS file.'
  );
  process.exit(1);
}

// Read the generated CSS
let css = fs.readFileSync(inputCssPath, "utf8");

// Basic minification (remove comments and extra whitespace)
function minifyCss(css) {
  return css
    .replace(/\/\*[\s\S]*?\*\//g, "") // Remove comments
    .replace(/\s+/g, " ") // Replace multiple spaces with single space
    .replace(/\s*([{}:;,])\s*/g, "$1") // Remove spaces around brackets, braces, parentheses, etc.
    .replace(/;\}/g, "}") // Remove trailing semicolons
    .trim(); // Trim leading/trailing whitespace
}

// Minify the CSS
const processedCss = minifyCss(css);

// Create a backup of the existing file if it exists
if (fs.existsSync(outputJsPath)) {
  console.log(`Creating backup of existing file: ${backupJsPath}`);
  fs.copyFileSync(outputJsPath, backupJsPath);
}

// Process the CSS to safely handle escape sequences
function processEscapeSequences(cssString) {
  // Replace octal escape sequences with hex equivalents
  // This regex finds backslash followed by 1-3 digits that could be interpreted as octal
  return cssString.replace(/\\([0-7]{1,3})/g, (match, octal) => {
    // Convert octal to hex
    const hexValue = parseInt(octal, 8).toString(16).padStart(2, "0");
    return `\\x${hexValue}`;
  });
}

// Process CSS for safe escaping before inlining it
const safeProcessedCss = processEscapeSequences(processedCss);

// Create the JavaScript module with the inlined CSS
const jsContent = `/**
 * Auto-generated inlined Tailwind CSS styles
 * DO NOT EDIT THIS FILE DIRECTLY - it is generated from tailwind-web.css
 */

// The inlined styles that will be injected directly
export const inlinedTailwindStyles = \`${safeProcessedCss.replace(
  /`/g,
  "\\`"
)}\`;

// Function to inject the inlined styles
export function injectInlinedStyles() {
  if (typeof document === 'undefined') {
    return;
  }

  // Only inject if not already injected
  if (document.getElementById('inlined-tailwind-styles')) {
    return;
  }

  // Create style element
  const style = document.createElement('style');
  style.id = 'inlined-tailwind-styles';
  style.textContent = inlinedTailwindStyles;
  
  // Inject it into the head
  document.head.appendChild(style);
  
  console.log('Inlined Tailwind styles injected successfully');
}
`;

// Write the output file
fs.writeFileSync(outputJsPath, jsContent);
console.log(`âœ… Inlined Tailwind CSS created successfully at: ${outputJsPath}`);
console.log(`   Original size: ${(css.length / 1024).toFixed(2)} KB`);
console.log(`   Optimized size: ${(processedCss.length / 1024).toFixed(2)} KB`);
